// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager_app/test/cubits/task_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager_app/core/networks/failures.dart' as _i7;
import 'package:task_manager_app/models/task_model.dart' as _i5;
import 'package:task_manager_app/models/tasks_model.dart' as _i8;
import 'package:task_manager_app/repositories/tasks_repo/local_tasks_repo.dart'
    as _i3;
import 'package:task_manager_app/repositories/tasks_repo/remote_tasks_repo.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalTasksRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalTasksRepo extends _i1.Mock implements _i3.LocalTasksRepo {
  MockLocalTasksRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> insertTasks(List<_i5.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTasks,
          [tasks],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.TaskModel>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<int> deleteAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllTasks,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [RemoteTasksRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteTasksRepo extends _i1.Mock implements _i6.RemoteTasksRepo {
  MockRemoteTasksRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i8.TasksModel>> getAllUserTasks({
    required num? userId,
    int? limit,
    int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllUserTasks,
          [],
          {
            #userId: userId,
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i8.TasksModel>>.value(
            _FakeEither_0<_i7.Failure, _i8.TasksModel>(
          this,
          Invocation.method(
            #getAllUserTasks,
            [],
            {
              #userId: userId,
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i8.TasksModel>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, void>> updateTasks(
          {required _i5.TaskModel? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #updateTasks,
            [],
            {#task: task},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, void>> deleteTasks(
          {required _i5.TaskModel? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deleteTasks,
            [],
            {#task: task},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i5.TaskModel>> addNewTasks({
    required String? taskTitle,
    required num? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTasks,
          [],
          {
            #taskTitle: taskTitle,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i5.TaskModel>>.value(
            _FakeEither_0<_i7.Failure, _i5.TaskModel>(
          this,
          Invocation.method(
            #addNewTasks,
            [],
            {
              #taskTitle: taskTitle,
              #userId: userId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i5.TaskModel>>);
}
